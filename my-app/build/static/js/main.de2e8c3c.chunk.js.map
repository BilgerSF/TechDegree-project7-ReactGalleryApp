{"version":3,"sources":["Components/Image.js","Components/NoImages.js","Components/ImageDisplayer.js","Components/Navigation.js","Components/Search.js","Components/NotFound.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Image","props","links","map","link","i","key","src","alt","NoIMages","className","ImageContainer","Array","from","route","loading","submition","size","length","splice","NoImages","Navigation","exact","to","Search","state","keys","keyHandler","bind","submitHandler","e","this","setState","target","value","preventDefault","history","push","callBack","onSubmit","type","onChange","id","enableBackground","height","viewBox","width","xmlns","d","fill","transform","React","Component","withRouter","NotFound","fetch","require","App","images","stateHandler","fetcher","setTimeout","searchKey","stateClone","tag","then","response","json","data","photos","photo","jsonParser","catch","error","console","farmIds","serverIds","ids","secretIds","forEach","element","farm","server","secret","imageLinkBuilder","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.de2e8c3c.chunk.js","sourcesContent":["/*\r\nImage component: Receives an array of links and creates and image with that link\r\n*/\r\nimport React from 'react'\r\n\r\nfunction Image(props){\r\n   let images = props.links.map((link,i) =>{\r\n     return <li key={i} ><img src={link} alt = 'Img removed' /></li>\r\n});\r\n\r\nreturn(\r\n    images\r\n );\r\n}\r\nexport default Image;\r\n","import React from 'react';\r\n\r\nfunction NoIMages(){\r\n    return(\r\n        <div className = 'photo-container'> \r\n        <h2>Sorry, no images match your search</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoIMages;","/*\r\nImageDisplayer Component: \r\n*Manages what gets displayed on the browser by adding and removing link elements from the a state clone. \r\n*Clones the state and then it passes the list of links to Image.js\r\n*Handles the loading feature as well as the no maches feature.\r\n*/\r\nimport React from 'react';\r\nimport Image from './Image';\r\nimport NoImages from './NoImages';\r\n\r\nfunction ImageContainer(props){\r\n\r\n  let links = Array.from(props.links);\r\n  let route = props.route;\r\n  let loading = props.loading\r\n  let submition = props.submition;\r\n  let size = props.links.length;\r\n//Display only new york images when 'New York' is clicked \r\nif(route==='New York'){\r\n  links.splice(72,24);\r\n  links.splice(24,48)\r\n  submition = false;\r\n}\r\n//Display only San Francisco  images when 'San Francisco' is clicked \r\nelse if(route==='San Francisco'){\r\n  links.splice(72,24);\r\n  links.splice(48,24);\r\n  links.splice(0,24)\r\n  submition = false; \r\n}\r\n//Display only Paris  images when 'Paris' is clicked \r\nelse if(route==='Paris') {\r\n  links.splice(72,24);\r\n  links.splice(0,48);\r\n  submition = false;\r\n}\r\nelse{\r\n  links.splice(0,72);\r\n}\r\n\r\n//.................................Loading and No maches features.........................................\r\n//Render no images component when nothing was fetched \r\nif( (loading === false) && (size === 72) && (submition === true) ){\r\n  return <NoImages/>  \r\n}\r\n//Render the image component when everything worked as expected and the coponent is not loading\r\nif(loading === false) {\r\n  return(\r\n    <div className = 'photo-container'> \r\n     <h2>Results</h2>\r\n        <ul>\r\n          <Image links = {links}/>\r\n        </ul>   \r\n    </div>\r\n      )\r\n  }\r\n//Render the loading component when the fetching process is still in progress\r\n else if ( loading ===  true ) {\r\n    return(\r\n        <div className = 'photo-container'> \r\n          <h2 className = 'loader'>Loading...</h2>\r\n        </div>\r\n      )\r\n   }\r\n    \r\n}\r\n\r\nexport default ImageContainer;\r\n","/*\r\nNavigation Component: Directes to the corresponding Route( on App.js) when the link is clicked.\r\n*/\r\nimport React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nfunction Navigation(){\r\n   return(\r\n        <nav className = 'main-nav'>\r\n        <ul>\r\n           <li><NavLink exact to='/New York'>New York</NavLink></li>\r\n           <li><NavLink exact to='/San Francisco'>San Francisco</NavLink></li>\r\n           <li><NavLink exact to='/Paris'>Paris</NavLink></li>\r\n         </ul>   \r\n       </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","/*\r\nSearch Component: \r\n*Updates its own state when a key is typed\r\n*Sends the typed word/phrase to the fetcher method on app.js\r\n*/\r\nimport React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\n\r\nclass Search extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            keys: []\r\n        }\r\n    this.keyHandler = this.keyHandler.bind(this);\r\n    this.submitHandler = this.submitHandler.bind(this);\r\n    }\r\n//Change state when a key is typed\r\n keyHandler(e){\r\n    this.setState({keys:e.target.value});\r\n }\r\n//Change route and call the fetcher callback\r\n submitHandler(e){\r\n    e.preventDefault();\r\n    //change route \r\n    this.props.history.push(`/Search/${this.state.keys}`)\r\n    //Callback\r\n    this.props.callBack(this.state.keys);\r\n }\r\n\r\nrender(){\r\n    return(\r\n        <form onSubmit = {this.submitHandler} className = 'search-form'>\r\n            <input type = 'text' value={this.state.keys} onChange = {this.keyHandler}/>\r\n            <button type = 'submitt'><svg id=\"Capa_1\" enableBackground=\"new 0 0 512 512\" height=\"28\" viewBox=\"0 0 512 512\" width=\"28\" xmlns=\"http://www.w3.org/2000/svg\"><g><path d=\"m175.614 282.421h90v25h-90z\" fill=\"#83a3ab\" transform=\"matrix(.707 -.707 .707 .707 -143.924 242.378)\"/><path d=\"m168.543 280.35h90v15h-90z\" fill=\"#93b7c0\" transform=\"matrix(.707 -.707 .707 .707 -140.996 235.307)\"/><path d=\"m66.192 403.381-53.033 95.46c17.545 17.545 46.094 17.546 63.64 0l21.213-21.213z\" fill=\"#93b7c0\"/><path d=\"m34.373 413.988-21.213 21.213c-17.546 17.546-17.545 46.094 0 63.64l74.246-74.246z\" fill=\"#acd5df\"/><path d=\"m98.012 477.627 142.048-142.047-31.82-31.82-92.237 49.811-49.811 92.237z\" fill=\"#3a6fd8\"/><path d=\"m20.863 336.374h200.885v45h-200.885z\" fill=\"#3b88f5\" transform=\"matrix(.707 -.707 .707 .707 -218.232 190.888)\"/><path d=\"m463.526 48.474-175.539 58.513-58.513 175.539c64.632 64.632 169.421 64.632 234.052 0s64.632-169.42 0-234.052z\" fill=\"#93b7c0\"/><path d=\"m229.474 48.474c-64.632 64.632-64.632 169.421 0 234.052l234.052-234.052c-64.632-64.632-169.42-64.632-234.052 0z\" fill=\"#acd5df\"/><path d=\"m421.1 90.9-111.9 37.3-37.3 111.9c41.2 41.2 107.999 41.2 149.2 0s41.2-107.999 0-149.2z\" fill=\"#c4f3ff\"/><path d=\"m271.9 90.9c-41.2 41.2-41.2 107.999 0 149.2l149.2-149.2c-41.201-41.2-107.999-41.2-149.2 0z\" fill=\"#fff\"/></g></svg></button>\r\n        </form>\r\n      )\r\n   }\r\n}\r\n\r\nexport default withRouter(Search);\r\n","import React from 'react';\r\n\r\nfunction NotFound(){\r\n\r\n    return(\r\n        <h2>404 Not found</h2>\r\n    )\r\n}\r\n\r\nexport default NotFound;","/*\nGerardo Bilbatuaa\nTech Degree - Project 7\nReact Gallery App\nApp component: Parent component that holds the state of images that render in the screen.\n*/\nimport React from 'react';\nimport ImageContainer from './Components/ImageDisplayer';\nimport apiKey from './config';\nimport Navigation from './Components/Navigation';\nimport {BrowserRouter,Route,Switch,Redirect} from 'react-router-dom';\nimport Search from './Components/Search';\nimport NotFound from './Components/NotFound';\nimport NoImages from './Components/NoImages';\nconst fetch = require('node-fetch');\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      images:[],\n      loading: true, \n      submition: false\n    };\n    this.stateHandler = this.stateHandler.bind(this);\n    this.fetcher = this.fetcher.bind(this);\n  }\n\n//Fetches images from 3 different topics when the app first loads.\ncomponentDidMount(){\n  this.fetcher('New York,Times Square,Central Park,New York night'); \n    setTimeout(()=>{this.fetcher('San Francisco,San Francisco Bridge,San Francisco Salesforce');},400);\n    setTimeout(()=>{this.fetcher('Paris,Eiffel Tower');},800); \n}\n//Passed as a callback to search component. This callback modifies state of main component when fetching from the search component.\n stateHandler(searchKey){\n  let stateClone;\n  this.setState({submition:true,loading:true}); //set the LOADING spinner to true when a search keyword is submitted\n//Fetches new images. 72 + 24\n  if(this.state.images.length === 72){\n    //Add state\n    this.fetcher(searchKey);\n  }\n//if doing a second search. Removes the last 24 fetched images and then it adds the new 24 images to the state\n  else{\n    //remove and then fetch\n    stateClone = Array.from(this.state.images);\n    stateClone.splice(72,24);\n    this.setState({ images: stateClone});\n    this.fetcher(searchKey);\n  }\n  \n}\n\n//This method uses the fetch API and then it parses the JSON response.\nfetcher(tag){\n  \n  fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${tag}&per_page=24&sort=relevance&content_type=1&format=json&nojsoncallback=1`)\n  .then( (response) =>{\n    const jsonResponse = response.json()\n    return jsonResponse\n  })\n  .then((data)=> {\n    const photos = data.photos.photo;\n    this.jsonParser(photos);\n    this.setState({loading:false});//Set the loading spinner to false     \n   }).catch(error=>{\n  console.error('Error Fetching data from flickr API',error)\n   })\n}\n\n//This method parses the JSON response into variables containing the image IDs\n jsonParser(photos){\n    let farmIds = [];\n    let serverIds = [];\n    let ids = [];\n    let secretIds = [];\n\n    photos.forEach(element => {\n    farmIds.push(element.farm);\n    serverIds.push(element.server);\n    ids.push(element.id);\n    secretIds.push(element.secret);\n});\n    this.imageLinkBuilder(farmIds,serverIds,ids,secretIds);\n }\n//This method build the links needed for displaying the images on the browser\n//Adds the links the the state \n imageLinkBuilder(farmIds,serverIds,ids,secretIds){\n    let link;\n    let i;\n    for(i=0;i<=(farmIds.length)-1;i++){\n         link = `http://farm${farmIds[i]}.staticflickr.com/${serverIds[i]}/${ids[i]}_${secretIds[i]}.jpg`\n         this.setState({\n          images:[...this.state.images, link]\n        });\n      }\n   }\n\n  render(){\n  return (\n   <BrowserRouter> \n\n    <div className=\"App\">\n      <Navigation />\n      <Search callBack = {this.stateHandler}/>\n    </div>\n\n      <Switch>\n        <Route exact path=\"/\" render={() => <Redirect to=\"/New York\" />} />\n        <Route exact path = '/New York' render={()=><ImageContainer links={this.state.images} loading={this.state.loading} submition={this.state.submition} route = 'New York'  />}/>\n        <Route exact path = '/San Francisco' render={()=><ImageContainer links={this.state.images} loading={this.state.loading}  submition={this.state.submition} route = 'San Francisco'  />}/>\n        <Route exact path = '/Paris' render={()=><ImageContainer links={this.state.images} loading={this.state.loading} submition={this.state.submition}  route = 'Paris'/>}  />\n        <Route exact path = '/Search/:keys' render={()=><ImageContainer links={this.state.images} loading={this.state.loading} submition={this.state.submition} route = 'Search'  />}/>\n        <Route  exact path = '/Search/' component = {NoImages} />\n        <Route component = {NotFound} />\n     </Switch> \n\n    </BrowserRouter>  \n   );\n  }\n}\n\nexport default App;\n","/*\r\nAPI Endpoint:\r\n1- Request\r\nhttps://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${tag}&per_page=24&sort=relevance&content_type=1&format=json&nojsoncallback=1\r\n2-Image URL\r\nhttp://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg\r\n*/  \r\n\r\nconst apiKey  = '18402ceb172cff66fa1f5197f318d75c';\r\nexport default apiKey;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}